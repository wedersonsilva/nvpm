Menu {

  Current
    *feat-new-project*

  Doing

  Todo
    *feat-edit-remember*
    *feat-save*
    *feat-create-dirs*
    *feat-root-dir*

  Issues

    Solved
      *load-deft-missing-folder*
      *wildcard-expand*
      *wildcard-resolve*

  Search
    *get-script-location*
    *glob-function*

  Done
    *feat-edit-project-files*
    *feat-defaut-project*

}
Desc {

*feat-edit-remember*                        {

`29 Feb 2020`

When reloading the current project after edit mode
is  done,  the  current  buffer position is lost. 

A remember   system   must   be  implemented  into
`g:nvpm.data.load()` function.


}
*feat-user-view*                            {

24 Feb 2020

The user must be able to set the colors and separator characters on the status
and tab lines. A study will be made to find out which data structure will be
userd to store the settings and how

The easiest and quickest way for now will be the use if dictionaries in the
user's `init.vim`.

The attributes
--------------

- Selected   element        : current buffer and tabs
- Unselected element        : current buffer and tabs
- Tabs and status fill      : The part not containing any element
- Current workspace and tab : 


}
*wildcard-expand*                           {

date 21 Feb 2020

  Problem  detected  on wildcard
  expansions       such       as
  `~/.config`,  where  `~` won't
  be  transformed  into the home
  folder

|solution|

  There  is  a  function  called
  `expand()`   that  solved  the
  problem.

}
*wildcard-resolve*                          {

date 21 Feb 2020

Same  as *wildcard-expand* but
for       symbolic      links.

|solution|

  There  is  a  function  called
  `resolve()`   that  solved  the
  problem.

}
*feat-defaut-project*                       {

21 Feb 2020

The feature is about loading a
user  defined  default project
file  somewhere on nvim start.
I'm   thinking   on   using  a
symbolic  link  that points to
the  desired  file.  It's  the
simpler approach I'm sure, but
issues   maybe   somewhat   be
expected.

|issue-colorscheme|

There  is  an  issue  with the
colorscheme.      It     loads
perfectly,  but the colors are
gone.

|solved|

A file named `default`, inside
VPM  folder will hold the name
of  the  default  project. The
command  `VPMSaveDefault`  was
also    implemented   in   the
process.  No  arguments  means
save   the   current  project.
Pressing    `tab`   will   run
through  all possible projects
and  choosing one will save it
as default.

}
*get-script-location*                       {

`script absolute filename`
  resolve(expand('<sfile>:p'))

`script absolute directory`
  resolve(expand('<sfile>:h'))

`see :h expand()`

}
*feat-edit-project-files*                   {

21 Feb 2020 {

This   feature   regards   the
ability    of   checking   all
possible   project   files  in
order to change and load them.
The  following conditions must
be satisfied:

1) command :VPMEditProjects

2)  A temporary workspace will
be created containing each and
all       project       files

3) If the current project file
is  changed,  then  reload it.

this  feature will prevent the
user  from  the need of having
to  point  the  project  files
inside themselves.
}
24 Feb 2020 {

|issue|: VPMEditProjects when focused on last workspace

}

}
*feat-save*                                 {

`22 Feb 2020`

Methods   under   |g:vpm.save|
`dict`.   The  methods  should
regard   the   many  different
actions of saving things, such
as:


1) |feat-defaut-project|
2) |feat-edit-project-files|
   where  upon saving the project
   file,   vpm  must  also  apply
   changes  if  that  project  is
   currently              loaded.

}
*feat-root-dir*                             {

`22 Feb 2020`

This  feature  regards  the  parse  system for the
VPM's markup language. It should give the user the
oportunity  of  setting a different root directory
rather  than  the  path where nvim was started. It
should          work          as          follows:


current directory   : /path/to/project1
different directory : /path/to/project2

so   let's  say  the  project1's  layout  file  is
(/path/to/project1/.vpm/proj/code):

vpm
---------------------------------------
workspace Code
  tab Main
    buff Main:main.c
    term Terminal:bash
workspace Docs
  tab Project2
    buff Main:/path/to/project2/doc.txt
---------------------------------------

so the user should have a `root` keyword to use it
anywhere, such as:

vpm
------------------------
workspace Code
  tab Main
    buff Main:main.c
    term Terminal:bash
workspace Docs
  root /path/to/project2
  tab Project2
    buff Main:doc.txt
------------------------

this was, VPM should be able to prepend the string
`/path/to/project2`  to `doc.txt` in order to form
the    whole    path    to   the   doc.txt   file.

Yet another approach is to declare the root folder
just  after  the  workspace  name, but separate it
with ":", so the following

vpm
----------------------------------
workspace Docs : /path/to/project2
----------------------------------

should have the same effect.

This feat should work for tabs as well. The buffer
already has it.

}
*load-deft-missing-folder*                  {

24 Feb 2020

If  default  project  is  set  but  it's  file  is
non-existing,   then  an  error  arrises.  Fix  by
checking g:vpm.data.load()


}
*glob-function*
  
  use it to list a directory

  call glob('/path/to/dir/*')

}
vim: tw=80 ft=help isk+=<,>,\:,+,-,',",[
